// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace gp_regression_test_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "src/test/test-models/good/function-signatures/math/matrix/gp_regression_test.stan");
    reader.add_event(104, 102, "end", "src/test/test-models/good/function-signatures/math/matrix/gp_regression_test.stan");
    return reader;
}

class gp_regression_test_model : public prob_grad {
private:
        int D;
        int N;
        std::vector<vector_d> x1;
        vector_d y;
        std::vector<double> x;
        int N_pred;
        std::vector<vector_d> x1_pred;
        vector_d mu;
public:
    gp_regression_test_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    gp_regression_test_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "gp_regression_test_model_namespace::gp_regression_test_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];
            check_greater_or_equal(function__, "D", D, 1);

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);

            current_statement_begin__ = 5;
            validate_non_negative_index("x1", "D", D);
            validate_non_negative_index("x1", "N", N);
            context__.validate_dims("data initialization", "x1", "vector_d", context__.to_vec(N,D));
            x1 = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(D));
            vals_r__ = context__.vals_r("x1");
            pos__ = 0;
            size_t x1_j_1_max__ = D;
            size_t x1_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x1_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x1_k_0_max__; ++k_0__) {
                    x1[k_0__](j_1__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 6;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 7;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(N));
            x = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                x[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "N_pred", "int", context__.to_vec());
            N_pred = int(0);
            vals_i__ = context__.vals_i("N_pred");
            pos__ = 0;
            N_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_pred", N_pred, 1);

            current_statement_begin__ = 10;
            validate_non_negative_index("x1_pred", "D", D);
            validate_non_negative_index("x1_pred", "N_pred", N_pred);
            context__.validate_dims("data initialization", "x1_pred", "vector_d", context__.to_vec(N_pred,D));
            x1_pred = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N_pred, Eigen::Matrix<double, Eigen::Dynamic, 1>(D));
            vals_r__ = context__.vals_r("x1_pred");
            pos__ = 0;
            size_t x1_pred_j_1_max__ = D;
            size_t x1_pred_k_0_max__ = N_pred;
            for (size_t j_1__ = 0; j_1__ < x1_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x1_pred_k_0_max__; ++k_0__) {
                    x1_pred[k_0__](j_1__) = vals_r__[pos__++];
                }
            }


            // initialize transformed data variables
            current_statement_begin__ = 13;
            validate_non_negative_index("mu", "N", N);
            mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(mu, DUMMY_VAR__);

            // execute transformed data statements
            current_statement_begin__ = 14;
            stan::math::assign(mu, rep_vector(0, N));

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            num_params_r__ += 1;
            current_statement_begin__ = 19;
            validate_non_negative_index("length_scale_ard", "D", D);
            num_params_r__ += (1 * D);
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 22;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~gp_regression_test_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 17;
        if (!(context__.contains_r("magnitude")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable magnitude missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("magnitude");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "magnitude", "double", context__.to_vec());
        double magnitude(0);
        magnitude = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, magnitude);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable magnitude: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 18;
        if (!(context__.contains_r("length_scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable length_scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("length_scale");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "length_scale", "double", context__.to_vec());
        double length_scale(0);
        length_scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, length_scale);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable length_scale: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 19;
        if (!(context__.contains_r("length_scale_ard")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable length_scale_ard missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("length_scale_ard");
        pos__ = 0U;
        validate_non_negative_index("length_scale_ard", "D", D);
        context__.validate_dims("parameter initialization", "length_scale_ard", "double", context__.to_vec(D));
        std::vector<double> length_scale_ard(D, double(0));
        size_t length_scale_ard_k_0_max__ = D;
        for (size_t k_0__ = 0; k_0__ < length_scale_ard_k_0_max__; ++k_0__) {
            length_scale_ard[k_0__] = vals_r__[pos__++];
        }
        size_t length_scale_ard_i_0_max__ = D;
        for (size_t i_0__ = 0; i_0__ < length_scale_ard_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, length_scale_ard[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable length_scale_ard: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 20;
        if (!(context__.contains_r("sig")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sig", "double", context__.to_vec());
        double sig(0);
        sig = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sig);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 22;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 17;
            local_scalar_t__ magnitude;
            (void) magnitude;  // dummy to suppress unused var warning
            if (jacobian__)
                magnitude = in__.scalar_lb_constrain(0, lp__);
            else
                magnitude = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 18;
            local_scalar_t__ length_scale;
            (void) length_scale;  // dummy to suppress unused var warning
            if (jacobian__)
                length_scale = in__.scalar_lb_constrain(0, lp__);
            else
                length_scale = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 19;
            std::vector<local_scalar_t__> length_scale_ard;
            size_t length_scale_ard_d_0_max__ = D;
            length_scale_ard.reserve(length_scale_ard_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < length_scale_ard_d_0_max__; ++d_0__) {
                if (jacobian__)
                    length_scale_ard.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    length_scale_ard.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 20;
            local_scalar_t__ sig;
            (void) sig;  // dummy to suppress unused var warning
            if (jacobian__)
                sig = in__.scalar_lb_constrain(0, lp__);
            else
                sig = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 22;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 25;
            validate_non_negative_index("L_K", "N", N);
            validate_non_negative_index("L_K", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_K(N, N);
            stan::math::initialize(L_K, DUMMY_VAR__);
            stan::math::fill(L_K, DUMMY_VAR__);

            // transformed parameters block statements
            {
            current_statement_begin__ = 28;
            validate_non_negative_index("K", "N", N);
            validate_non_negative_index("K", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(N, N);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            stan::math::assign(K,gp_dot_prod_cov(x, sig));

            current_statement_begin__ = 30;
            validate_non_negative_index("K2", "N", N);
            validate_non_negative_index("K2", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K2(N, N);
            stan::math::initialize(K2, DUMMY_VAR__);
            stan::math::fill(K2, DUMMY_VAR__);
            stan::math::assign(K2,gp_dot_prod_cov(x1, sig));

            current_statement_begin__ = 32;
            validate_non_negative_index("K3", "N", N);
            validate_non_negative_index("K3", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K3(N, N);
            stan::math::initialize(K3, DUMMY_VAR__);
            stan::math::fill(K3, DUMMY_VAR__);
            stan::math::assign(K3,gp_dot_prod_cov(x, x, sig));

            current_statement_begin__ = 34;
            validate_non_negative_index("K4", "N", N);
            validate_non_negative_index("K4", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K4(N, N);
            stan::math::initialize(K4, DUMMY_VAR__);
            stan::math::fill(K4, DUMMY_VAR__);
            stan::math::assign(K4,gp_dot_prod_cov(x1, x1, sig));

            current_statement_begin__ = 37;
            validate_non_negative_index("K5", "N", N);
            validate_non_negative_index("K5", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K5(N, N);
            stan::math::initialize(K5, DUMMY_VAR__);
            stan::math::fill(K5, DUMMY_VAR__);
            stan::math::assign(K5,gp_exp_quad_cov(x, magnitude, length_scale));

            current_statement_begin__ = 39;
            validate_non_negative_index("K6", "N", N);
            validate_non_negative_index("K6", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K6(N, N);
            stan::math::initialize(K6, DUMMY_VAR__);
            stan::math::fill(K6, DUMMY_VAR__);
            stan::math::assign(K6,gp_exp_quad_cov(x1, magnitude, length_scale));

            current_statement_begin__ = 41;
            validate_non_negative_index("K7", "N", N);
            validate_non_negative_index("K7", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K7(N, N);
            stan::math::initialize(K7, DUMMY_VAR__);
            stan::math::fill(K7, DUMMY_VAR__);
            stan::math::assign(K7,gp_exp_quad_cov(x, x, magnitude, length_scale));

            current_statement_begin__ = 43;
            validate_non_negative_index("K8", "N", N);
            validate_non_negative_index("K8", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K8(N, N);
            stan::math::initialize(K8, DUMMY_VAR__);
            stan::math::fill(K8, DUMMY_VAR__);
            stan::math::assign(K8,gp_exp_quad_cov(x1, x1, magnitude, length_scale));

            current_statement_begin__ = 45;
            validate_non_negative_index("K17", "N", N);
            validate_non_negative_index("K17", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K17(N, N);
            stan::math::initialize(K17, DUMMY_VAR__);
            stan::math::fill(K17, DUMMY_VAR__);
            stan::math::assign(K17,gp_exp_quad_cov(x1, magnitude, length_scale_ard));

            current_statement_begin__ = 47;
            validate_non_negative_index("K18", "N", N);
            validate_non_negative_index("K18", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K18(N, N);
            stan::math::initialize(K18, DUMMY_VAR__);
            stan::math::fill(K18, DUMMY_VAR__);
            stan::math::assign(K18,gp_exp_quad_cov(x1, x1, magnitude, length_scale_ard));

            current_statement_begin__ = 51;
            validate_non_negative_index("K9", "N", N);
            validate_non_negative_index("K9", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K9(N, N);
            stan::math::initialize(K9, DUMMY_VAR__);
            stan::math::fill(K9, DUMMY_VAR__);
            stan::math::assign(K9,gp_matern32_cov(x, magnitude, length_scale));

            current_statement_begin__ = 53;
            validate_non_negative_index("K10", "N", N);
            validate_non_negative_index("K10", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K10(N, N);
            stan::math::initialize(K10, DUMMY_VAR__);
            stan::math::fill(K10, DUMMY_VAR__);
            stan::math::assign(K10,gp_matern32_cov(x1, magnitude, length_scale));

            current_statement_begin__ = 55;
            validate_non_negative_index("K11", "N", N);
            validate_non_negative_index("K11", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K11(N, N);
            stan::math::initialize(K11, DUMMY_VAR__);
            stan::math::fill(K11, DUMMY_VAR__);
            stan::math::assign(K11,gp_matern32_cov(x, x, magnitude, length_scale));

            current_statement_begin__ = 57;
            validate_non_negative_index("K12", "N", N);
            validate_non_negative_index("K12", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K12(N, N);
            stan::math::initialize(K12, DUMMY_VAR__);
            stan::math::fill(K12, DUMMY_VAR__);
            stan::math::assign(K12,gp_matern32_cov(x1, x1, magnitude, length_scale));

            current_statement_begin__ = 59;
            validate_non_negative_index("K19", "N", N);
            validate_non_negative_index("K19", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K19(N, N);
            stan::math::initialize(K19, DUMMY_VAR__);
            stan::math::fill(K19, DUMMY_VAR__);
            stan::math::assign(K19,gp_matern32_cov(x1, magnitude, length_scale_ard));

            current_statement_begin__ = 61;
            validate_non_negative_index("K20", "N", N);
            validate_non_negative_index("K20", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K20(N, N);
            stan::math::initialize(K20, DUMMY_VAR__);
            stan::math::fill(K20, DUMMY_VAR__);
            stan::math::assign(K20,gp_matern32_cov(x1, x1, magnitude, length_scale_ard));

            current_statement_begin__ = 65;
            validate_non_negative_index("K13", "N", N);
            validate_non_negative_index("K13", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K13(N, N);
            stan::math::initialize(K13, DUMMY_VAR__);
            stan::math::fill(K13, DUMMY_VAR__);
            stan::math::assign(K13,gp_matern52_cov(x, magnitude, length_scale));

            current_statement_begin__ = 67;
            validate_non_negative_index("K14", "N", N);
            validate_non_negative_index("K14", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K14(N, N);
            stan::math::initialize(K14, DUMMY_VAR__);
            stan::math::fill(K14, DUMMY_VAR__);
            stan::math::assign(K14,gp_matern52_cov(x1, magnitude, length_scale));

            current_statement_begin__ = 69;
            validate_non_negative_index("K15", "N", N);
            validate_non_negative_index("K15", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K15(N, N);
            stan::math::initialize(K15, DUMMY_VAR__);
            stan::math::fill(K15, DUMMY_VAR__);
            stan::math::assign(K15,gp_matern52_cov(x, x, magnitude, length_scale));

            current_statement_begin__ = 71;
            validate_non_negative_index("K16", "N", N);
            validate_non_negative_index("K16", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K16(N, N);
            stan::math::initialize(K16, DUMMY_VAR__);
            stan::math::fill(K16, DUMMY_VAR__);
            stan::math::assign(K16,gp_matern52_cov(x1, x1, magnitude, length_scale));

            current_statement_begin__ = 73;
            validate_non_negative_index("K21", "N", N);
            validate_non_negative_index("K21", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K21(N, N);
            stan::math::initialize(K21, DUMMY_VAR__);
            stan::math::fill(K21, DUMMY_VAR__);
            stan::math::assign(K21,gp_matern52_cov(x1, magnitude, length_scale_ard));

            current_statement_begin__ = 75;
            validate_non_negative_index("K22", "N", N);
            validate_non_negative_index("K22", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K22(N, N);
            stan::math::initialize(K22, DUMMY_VAR__);
            stan::math::fill(K22, DUMMY_VAR__);
            stan::math::assign(K22,gp_matern52_cov(x1, x1, magnitude, length_scale_ard));

            current_statement_begin__ = 78;
            validate_non_negative_index("K23", "N", N);
            validate_non_negative_index("K23", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K23(N, N);
            stan::math::initialize(K23, DUMMY_VAR__);
            stan::math::fill(K23, DUMMY_VAR__);
            stan::math::assign(K23,gp_exponential_cov(x, magnitude, length_scale));

            current_statement_begin__ = 80;
            validate_non_negative_index("K24", "N", N);
            validate_non_negative_index("K24", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K24(N, N);
            stan::math::initialize(K24, DUMMY_VAR__);
            stan::math::fill(K24, DUMMY_VAR__);
            stan::math::assign(K24,gp_exponential_cov(x1, magnitude, length_scale));

            current_statement_begin__ = 82;
            validate_non_negative_index("K55", "N", N);
            validate_non_negative_index("K55", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K55(N, N);
            stan::math::initialize(K55, DUMMY_VAR__);
            stan::math::fill(K55, DUMMY_VAR__);
            stan::math::assign(K55,gp_exponential_cov(x, x, magnitude, length_scale));

            current_statement_begin__ = 84;
            validate_non_negative_index("K26", "N", N);
            validate_non_negative_index("K26", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K26(N, N);
            stan::math::initialize(K26, DUMMY_VAR__);
            stan::math::fill(K26, DUMMY_VAR__);
            stan::math::assign(K26,gp_exponential_cov(x1, x1, magnitude, length_scale));

            current_statement_begin__ = 86;
            validate_non_negative_index("K27", "N", N);
            validate_non_negative_index("K27", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K27(N, N);
            stan::math::initialize(K27, DUMMY_VAR__);
            stan::math::fill(K27, DUMMY_VAR__);
            stan::math::assign(K27,gp_exponential_cov(x1, magnitude, length_scale_ard));

            current_statement_begin__ = 88;
            validate_non_negative_index("K28", "N", N);
            validate_non_negative_index("K28", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K28(N, N);
            stan::math::initialize(K28, DUMMY_VAR__);
            stan::math::fill(K28, DUMMY_VAR__);
            stan::math::assign(K28,gp_exponential_cov(x1, x1, magnitude, length_scale_ard));

            current_statement_begin__ = 91;
            validate_non_negative_index("K29", "N", N);
            validate_non_negative_index("K29", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K29(N, N);
            stan::math::initialize(K29, DUMMY_VAR__);
            stan::math::fill(K29, DUMMY_VAR__);
            stan::math::assign(K29,gp_periodic_cov(x, magnitude, length_scale, 1234));

            current_statement_begin__ = 93;
            validate_non_negative_index("K30", "N", N);
            validate_non_negative_index("K30", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K30(N, N);
            stan::math::initialize(K30, DUMMY_VAR__);
            stan::math::fill(K30, DUMMY_VAR__);
            stan::math::assign(K30,gp_periodic_cov(x, x, magnitude, length_scale, 1234));

            current_statement_begin__ = 95;
            validate_non_negative_index("K31", "N", N);
            validate_non_negative_index("K31", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K31(N, N);
            stan::math::initialize(K31, DUMMY_VAR__);
            stan::math::fill(K31, DUMMY_VAR__);
            stan::math::assign(K31,gp_periodic_cov(x1, magnitude, length_scale, 121));

            current_statement_begin__ = 97;
            validate_non_negative_index("K32", "N", N);
            validate_non_negative_index("K32", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K32(N, N);
            stan::math::initialize(K32, DUMMY_VAR__);
            stan::math::fill(K32, DUMMY_VAR__);
            stan::math::assign(K32,gp_periodic_cov(x1, x1, magnitude, length_scale, 121));


            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 25;
            size_t L_K_j_1_max__ = N;
            size_t L_K_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < L_K_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < L_K_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(L_K(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: L_K" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable L_K: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body


        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("magnitude");
        names__.push_back("length_scale");
        names__.push_back("length_scale_ard");
        names__.push_back("sig");
        names__.push_back("sigma");
        names__.push_back("L_K");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "gp_regression_test_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double magnitude = in__.scalar_lb_constrain(0);
        vars__.push_back(magnitude);

        double length_scale = in__.scalar_lb_constrain(0);
        vars__.push_back(length_scale);

        std::vector<double> length_scale_ard;
        size_t length_scale_ard_d_0_max__ = D;
        length_scale_ard.reserve(length_scale_ard_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < length_scale_ard_d_0_max__; ++d_0__) {
            length_scale_ard.push_back(in__.scalar_lb_constrain(0));
        }
        size_t length_scale_ard_k_0_max__ = D;
        for (size_t k_0__ = 0; k_0__ < length_scale_ard_k_0_max__; ++k_0__) {
            vars__.push_back(length_scale_ard[k_0__]);
        }

        double sig = in__.scalar_lb_constrain(0);
        vars__.push_back(sig);

        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 25;
            validate_non_negative_index("L_K", "N", N);
            validate_non_negative_index("L_K", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_K(N, N);
            stan::math::initialize(L_K, DUMMY_VAR__);
            stan::math::fill(L_K, DUMMY_VAR__);

            // do transformed parameters statements
            {
            current_statement_begin__ = 28;
            validate_non_negative_index("K", "N", N);
            validate_non_negative_index("K", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(N, N);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            stan::math::assign(K,gp_dot_prod_cov(x, sig));

            current_statement_begin__ = 30;
            validate_non_negative_index("K2", "N", N);
            validate_non_negative_index("K2", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K2(N, N);
            stan::math::initialize(K2, DUMMY_VAR__);
            stan::math::fill(K2, DUMMY_VAR__);
            stan::math::assign(K2,gp_dot_prod_cov(x1, sig));

            current_statement_begin__ = 32;
            validate_non_negative_index("K3", "N", N);
            validate_non_negative_index("K3", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K3(N, N);
            stan::math::initialize(K3, DUMMY_VAR__);
            stan::math::fill(K3, DUMMY_VAR__);
            stan::math::assign(K3,gp_dot_prod_cov(x, x, sig));

            current_statement_begin__ = 34;
            validate_non_negative_index("K4", "N", N);
            validate_non_negative_index("K4", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K4(N, N);
            stan::math::initialize(K4, DUMMY_VAR__);
            stan::math::fill(K4, DUMMY_VAR__);
            stan::math::assign(K4,gp_dot_prod_cov(x1, x1, sig));

            current_statement_begin__ = 37;
            validate_non_negative_index("K5", "N", N);
            validate_non_negative_index("K5", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K5(N, N);
            stan::math::initialize(K5, DUMMY_VAR__);
            stan::math::fill(K5, DUMMY_VAR__);
            stan::math::assign(K5,gp_exp_quad_cov(x, magnitude, length_scale));

            current_statement_begin__ = 39;
            validate_non_negative_index("K6", "N", N);
            validate_non_negative_index("K6", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K6(N, N);
            stan::math::initialize(K6, DUMMY_VAR__);
            stan::math::fill(K6, DUMMY_VAR__);
            stan::math::assign(K6,gp_exp_quad_cov(x1, magnitude, length_scale));

            current_statement_begin__ = 41;
            validate_non_negative_index("K7", "N", N);
            validate_non_negative_index("K7", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K7(N, N);
            stan::math::initialize(K7, DUMMY_VAR__);
            stan::math::fill(K7, DUMMY_VAR__);
            stan::math::assign(K7,gp_exp_quad_cov(x, x, magnitude, length_scale));

            current_statement_begin__ = 43;
            validate_non_negative_index("K8", "N", N);
            validate_non_negative_index("K8", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K8(N, N);
            stan::math::initialize(K8, DUMMY_VAR__);
            stan::math::fill(K8, DUMMY_VAR__);
            stan::math::assign(K8,gp_exp_quad_cov(x1, x1, magnitude, length_scale));

            current_statement_begin__ = 45;
            validate_non_negative_index("K17", "N", N);
            validate_non_negative_index("K17", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K17(N, N);
            stan::math::initialize(K17, DUMMY_VAR__);
            stan::math::fill(K17, DUMMY_VAR__);
            stan::math::assign(K17,gp_exp_quad_cov(x1, magnitude, length_scale_ard));

            current_statement_begin__ = 47;
            validate_non_negative_index("K18", "N", N);
            validate_non_negative_index("K18", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K18(N, N);
            stan::math::initialize(K18, DUMMY_VAR__);
            stan::math::fill(K18, DUMMY_VAR__);
            stan::math::assign(K18,gp_exp_quad_cov(x1, x1, magnitude, length_scale_ard));

            current_statement_begin__ = 51;
            validate_non_negative_index("K9", "N", N);
            validate_non_negative_index("K9", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K9(N, N);
            stan::math::initialize(K9, DUMMY_VAR__);
            stan::math::fill(K9, DUMMY_VAR__);
            stan::math::assign(K9,gp_matern32_cov(x, magnitude, length_scale));

            current_statement_begin__ = 53;
            validate_non_negative_index("K10", "N", N);
            validate_non_negative_index("K10", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K10(N, N);
            stan::math::initialize(K10, DUMMY_VAR__);
            stan::math::fill(K10, DUMMY_VAR__);
            stan::math::assign(K10,gp_matern32_cov(x1, magnitude, length_scale));

            current_statement_begin__ = 55;
            validate_non_negative_index("K11", "N", N);
            validate_non_negative_index("K11", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K11(N, N);
            stan::math::initialize(K11, DUMMY_VAR__);
            stan::math::fill(K11, DUMMY_VAR__);
            stan::math::assign(K11,gp_matern32_cov(x, x, magnitude, length_scale));

            current_statement_begin__ = 57;
            validate_non_negative_index("K12", "N", N);
            validate_non_negative_index("K12", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K12(N, N);
            stan::math::initialize(K12, DUMMY_VAR__);
            stan::math::fill(K12, DUMMY_VAR__);
            stan::math::assign(K12,gp_matern32_cov(x1, x1, magnitude, length_scale));

            current_statement_begin__ = 59;
            validate_non_negative_index("K19", "N", N);
            validate_non_negative_index("K19", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K19(N, N);
            stan::math::initialize(K19, DUMMY_VAR__);
            stan::math::fill(K19, DUMMY_VAR__);
            stan::math::assign(K19,gp_matern32_cov(x1, magnitude, length_scale_ard));

            current_statement_begin__ = 61;
            validate_non_negative_index("K20", "N", N);
            validate_non_negative_index("K20", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K20(N, N);
            stan::math::initialize(K20, DUMMY_VAR__);
            stan::math::fill(K20, DUMMY_VAR__);
            stan::math::assign(K20,gp_matern32_cov(x1, x1, magnitude, length_scale_ard));

            current_statement_begin__ = 65;
            validate_non_negative_index("K13", "N", N);
            validate_non_negative_index("K13", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K13(N, N);
            stan::math::initialize(K13, DUMMY_VAR__);
            stan::math::fill(K13, DUMMY_VAR__);
            stan::math::assign(K13,gp_matern52_cov(x, magnitude, length_scale));

            current_statement_begin__ = 67;
            validate_non_negative_index("K14", "N", N);
            validate_non_negative_index("K14", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K14(N, N);
            stan::math::initialize(K14, DUMMY_VAR__);
            stan::math::fill(K14, DUMMY_VAR__);
            stan::math::assign(K14,gp_matern52_cov(x1, magnitude, length_scale));

            current_statement_begin__ = 69;
            validate_non_negative_index("K15", "N", N);
            validate_non_negative_index("K15", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K15(N, N);
            stan::math::initialize(K15, DUMMY_VAR__);
            stan::math::fill(K15, DUMMY_VAR__);
            stan::math::assign(K15,gp_matern52_cov(x, x, magnitude, length_scale));

            current_statement_begin__ = 71;
            validate_non_negative_index("K16", "N", N);
            validate_non_negative_index("K16", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K16(N, N);
            stan::math::initialize(K16, DUMMY_VAR__);
            stan::math::fill(K16, DUMMY_VAR__);
            stan::math::assign(K16,gp_matern52_cov(x1, x1, magnitude, length_scale));

            current_statement_begin__ = 73;
            validate_non_negative_index("K21", "N", N);
            validate_non_negative_index("K21", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K21(N, N);
            stan::math::initialize(K21, DUMMY_VAR__);
            stan::math::fill(K21, DUMMY_VAR__);
            stan::math::assign(K21,gp_matern52_cov(x1, magnitude, length_scale_ard));

            current_statement_begin__ = 75;
            validate_non_negative_index("K22", "N", N);
            validate_non_negative_index("K22", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K22(N, N);
            stan::math::initialize(K22, DUMMY_VAR__);
            stan::math::fill(K22, DUMMY_VAR__);
            stan::math::assign(K22,gp_matern52_cov(x1, x1, magnitude, length_scale_ard));

            current_statement_begin__ = 78;
            validate_non_negative_index("K23", "N", N);
            validate_non_negative_index("K23", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K23(N, N);
            stan::math::initialize(K23, DUMMY_VAR__);
            stan::math::fill(K23, DUMMY_VAR__);
            stan::math::assign(K23,gp_exponential_cov(x, magnitude, length_scale));

            current_statement_begin__ = 80;
            validate_non_negative_index("K24", "N", N);
            validate_non_negative_index("K24", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K24(N, N);
            stan::math::initialize(K24, DUMMY_VAR__);
            stan::math::fill(K24, DUMMY_VAR__);
            stan::math::assign(K24,gp_exponential_cov(x1, magnitude, length_scale));

            current_statement_begin__ = 82;
            validate_non_negative_index("K55", "N", N);
            validate_non_negative_index("K55", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K55(N, N);
            stan::math::initialize(K55, DUMMY_VAR__);
            stan::math::fill(K55, DUMMY_VAR__);
            stan::math::assign(K55,gp_exponential_cov(x, x, magnitude, length_scale));

            current_statement_begin__ = 84;
            validate_non_negative_index("K26", "N", N);
            validate_non_negative_index("K26", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K26(N, N);
            stan::math::initialize(K26, DUMMY_VAR__);
            stan::math::fill(K26, DUMMY_VAR__);
            stan::math::assign(K26,gp_exponential_cov(x1, x1, magnitude, length_scale));

            current_statement_begin__ = 86;
            validate_non_negative_index("K27", "N", N);
            validate_non_negative_index("K27", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K27(N, N);
            stan::math::initialize(K27, DUMMY_VAR__);
            stan::math::fill(K27, DUMMY_VAR__);
            stan::math::assign(K27,gp_exponential_cov(x1, magnitude, length_scale_ard));

            current_statement_begin__ = 88;
            validate_non_negative_index("K28", "N", N);
            validate_non_negative_index("K28", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K28(N, N);
            stan::math::initialize(K28, DUMMY_VAR__);
            stan::math::fill(K28, DUMMY_VAR__);
            stan::math::assign(K28,gp_exponential_cov(x1, x1, magnitude, length_scale_ard));

            current_statement_begin__ = 91;
            validate_non_negative_index("K29", "N", N);
            validate_non_negative_index("K29", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K29(N, N);
            stan::math::initialize(K29, DUMMY_VAR__);
            stan::math::fill(K29, DUMMY_VAR__);
            stan::math::assign(K29,gp_periodic_cov(x, magnitude, length_scale, 1234));

            current_statement_begin__ = 93;
            validate_non_negative_index("K30", "N", N);
            validate_non_negative_index("K30", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K30(N, N);
            stan::math::initialize(K30, DUMMY_VAR__);
            stan::math::fill(K30, DUMMY_VAR__);
            stan::math::assign(K30,gp_periodic_cov(x, x, magnitude, length_scale, 1234));

            current_statement_begin__ = 95;
            validate_non_negative_index("K31", "N", N);
            validate_non_negative_index("K31", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K31(N, N);
            stan::math::initialize(K31, DUMMY_VAR__);
            stan::math::fill(K31, DUMMY_VAR__);
            stan::math::assign(K31,gp_periodic_cov(x1, magnitude, length_scale, 121));

            current_statement_begin__ = 97;
            validate_non_negative_index("K32", "N", N);
            validate_non_negative_index("K32", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K32(N, N);
            stan::math::initialize(K32, DUMMY_VAR__);
            stan::math::fill(K32, DUMMY_VAR__);
            stan::math::assign(K32,gp_periodic_cov(x1, x1, magnitude, length_scale, 121));


            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t L_K_j_2_max__ = N;
                size_t L_K_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < L_K_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < L_K_j_1_max__; ++j_1__) {
                        vars__.push_back(L_K(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "gp_regression_test_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "magnitude";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "length_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t length_scale_ard_k_0_max__ = D;
        for (size_t k_0__ = 0; k_0__ < length_scale_ard_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "length_scale_ard" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t L_K_j_2_max__ = N;
            size_t L_K_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < L_K_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < L_K_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_K" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "magnitude";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "length_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t length_scale_ard_k_0_max__ = D;
        for (size_t k_0__ = 0; k_0__ < length_scale_ard_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "length_scale_ard" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t L_K_j_2_max__ = N;
            size_t L_K_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < L_K_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < L_K_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_K" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef gp_regression_test_model_namespace::gp_regression_test_model stan_model;

